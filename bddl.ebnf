bddl = { statement };

statement = import | enum | struct ; 

struct = "struct", name, "{", { struct | enum | var | offset | if }, "}" ;

var = [optional], type, name, ";"

offset = "@", expression, ":"

if = "if", expression, "{", { var | offset | if }, "}", [else]

else = "else", "{", {var | offset | if}, "}";

import = "import", string, ";" ;

enum = "enum", name, "{", {enumvar}, "}" ;

enumvar = type, name, "=", expression, ";"

name = /[a-zA-Z][a-zA-Z0-9_]+/

type = basic_type | udt | array;

array = type, "[", expression, "]" | type, "[", "]" ;

udt = struct_name | enum_name;

basic_type = byte int16LE int16BE uint16LE uint16BE int32LE int32BE uint32LE uint32BE int64LE uint64LE int64BE uint64BE; 

expression = cpexp | binexp | number | name; 

number = //;

cpexp = expression, ">" | "<" | "==" | "<=" | ">=" | "<>", expression;

